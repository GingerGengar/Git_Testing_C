Objectives of learning git

Setting a profile on git
To list all variables in the profile:
    git config -l
Git has system profiles, global profiles, and local profiles.
System profiles apply to all users and are written in /etc/git
Global profiles apply to just a specific user and is written in ~/.gitconfig or ~/.config/git/config
Local profiles only apply to a single project and is written in .git/config at the repository root
The local profiles override the global profiles and the global profiles override the system profiles. So, if the local profile does not exist, the global profile is used. If the global profile does not exist then the system profile is used.
Git needs an email and a name.
To modify the user name in the global profile
    git config --global user.name "GingerGengar"
To modify the email in the global profile
    git config --global user.email "GingerGengar123@gmail.com"
One can modify the user name in the local profile
    git config --local user.name "GingerGengar"
One can modify the email in the local profile
    git config --local user.email "GingerGengar123@gmail.com"
To see the name, currently
    git config user.name
To see the email, currently
    git config user.email

Make commits on git
Git has an intermediate place called the staging area before commits are made.
To stage files,
    git add file1 file2
Alternatively, staging all files except for the ones in the gitignore,
    git add *
To force staging all files, even the ones in the gitignore 
    git add -f *
To unstage a file,
    git restore --staged file1.txt file2.txt 
To make staging area finalized in a commit, say
    git commit -m "Give a helpful message on the git commit"

Restore old versions
To see all the history of the git commits,
    git log
To see the git commits pertaining to specific files
    git log file1.txt file2.txt
To restore a particular file to the last commit available,
    git checkout HEAD file.txt
To restore files from some commit
    git checkout COMMIT_NAME file1.txt file2.txt

Make Branches
    Creating New Branches
        git checkout -b NEW_BRANCH_NAME
    See ALL of the available branches, and where you are
        git branch -a
    Switch to another git branch
        git checkout THE_OTHER_BRANCH
    Please test that the branch is working well before merging.
    To merge branch, go to master branch, then invoke merge with intended
        git checkout master
        git merge OTHER_BRANCH_NAME
    After branch has been merged and works well, then it is safe to delete branches
    Why delete branches? Branches are like ideas.
    Once we are finished implementing the idea into reality, there is no longer any need of the idea.
    So, the idea that is now already realized is useless and ought to be deleted. Invoke 
        git branch -d MERGED_BRANCH_NAME

Pull Request branches to origin/master
    If the repository was cloned from external source using
        git clone SOME_LINK_TO_ANOTHER
    Then a remote origin already exists. To see, use 
        git remote --verbose
    Alternatively, if the repository was local and we want to add a remote, then
        git remote add LINK:PATH_TO_GIT_REPO
    First time pushing, use 
        git push -u origin HEAD
    Subsequently, just do
        git push

